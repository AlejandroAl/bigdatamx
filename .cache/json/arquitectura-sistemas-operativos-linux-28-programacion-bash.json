{
    "data": {
        "markdownRemark": {
            "html": "<h2>28. Programación Bash</h2>\n<h3>Shell :</h3>\n<p>Es la interfaz entre el usuario y el sistema operativo; permitiéndole interactuar con el sistema y sus recursos.</p>\n<h3>Bash :</h3>\n<p>Bash (Bourne\tAgain\tSHell); es un interprete\tde\tlos\tcomandos\tUNIX\tdel\nusuario, escrito para el proyecto GNU.\nEs un bash en el cual el usuario tipea los comandos y el sistemas por medio de bash reconoce los comandos y los interpreta.</p>\n<h3>Características principales de BASH :</h3>\n<ul>\n<li>Ejecución síncrona de órdenes (una tras otra) o asíncrona (en paralelo).</li>\n<li>Distintos tipos de redirecciones de entradas y salidas para el control y filtrado de la\ninformación.</li>\n<li>Control del entorno de los procesos.</li>\n<li>Ejecución de mandatos interactiva y desatendida, aceptando entradas desde teclado o\ndesde ficheros.</li>\n<li>Proporciona una serie de órdenes internas para la manipulación directa del intérprete y\nsu entrono de operación.</li>\n<li>Un lenguaje de programación de alto nivel, que incluye distinto tipos de variables,\noperadores, matrices, estructuras de control de flujo, entrecomillado, sustitución de\nvalores y funciones.</li>\n<li>Control de trabajos en primer y segundo plano.</li>\n<li>EAcceso al historial de comandos ejecutados.</li>\n</ul>\n<h3>Scripting :</h3>\n<p>El shell scripting permite utilizar las capacidades de la shell para\nautomatizar múltitud de tareas, en el cual te creas un archivo y dentro del archivo escribe los comandos\nque quieras realizar, y una ves creado el archivo se ejecuta, y automaticamente ejecuta el proceso;\nes una forma de automatizar un proceso sin tener que escribir a cada rato los comandos.</p>\n<h3>La línea de comandos :</h3>\n<p>La línea de comandos es el interfaz del usuario con el sistema, que permite personalizar el\nentorno de operación y ejecutar programas y guiones.</p>\n<p>El formato típico de una línea consta de una orden y unos modificadores y parámetros\nopcionales, aunque puede incluir algunos caracteres especiales, que modifican el\ncomportamiento típico.</p>\n<h3>Requerimientos para el Scripting :</h3>\n<ul>\n<li>Una terminal</li>\n<li>Un editor, puede ser vi , nano , gedit, u otro.</li>\n</ul>\n<h3>Shebang :</h3>\n<p>Al momento de crear una archivo, en ese script se coloca un header (Shebang),\nel cual le dice al shell con qué programa interpretar el script, cuando se ejecuta.</p>\n<ul>\n<li>\n<p>Tipos de Shebang :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/sh — Ejecuta usando sh, the Bourne shell\n#!/bin/bash — Ejecuta utilizando el interprete bash\n#!/usr/bin/perl -T — Ejecuta Utilizando Perl\n#!/usr/bin/php — Ejecuta utilizando Php\n#!/usr/bin/python -O — Ejecuta utilizando python\n#!/usr/bin/ruby — Ejecuta usando Ruby</code></pre>\n      </div>\n</li>\n</ul>\n<h3>Crear primer Script :</h3>\n<p>Para crea un Script, primero se abre una terminal :\n<code>ctrl alt t</code></p>\n<p>Una vez en la terminal, creas un archivo, el archivo puede tener extensión sh o no puede tener ninguna extensión; </p>\n<p>Si se quiere hacer un script de un lenguaje especifico, se le coloca la terminación adecuada al archivo ( .py, .php, .go, etc).</p>\n<p>Ejemplo :\n<code>javier@javier-orta:~$ touch primer_script</code></p>\n<p>Una vez ejecutado el comando, procedemos a ver si se creo el archivo :\n<code>ls ó ls | grep primer_script</code></p>\n<p>Y nos tiene que mostrar lo siguiente :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ls | grep primer_script\nprimer_script\njavier@javier-orta:~$</code></pre>\n      </div>\n<p>Ahora abrimos el archivo con cualquier editor :\n<code>javier@javier-orta:~$ nano primer_script</code></p>\n<p>Después editamos el archivo, y al principio en la primera linea colocamos el header :\n<code>#!/bin/bash ya que lo creamos sin ninguna extensión</code></p>\n<p>Y para imprimir un hola mundo se utiliza el comando echo, es el que se encarga de los prints :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\necho \"hola mundo\"</code></pre>\n      </div>\n<p>Por último guardamos los cambios al archivo , y le damos permisos, como es script para un sólo print\nle damos todos los permisos, pero los permisos es un tema muy importante, ya que depende de para que\nse va a utilizar el script y de acuerdo a eso es de como se le deben de asignar los permisos y sólo  el usuario root\no algún usuario administrador puede dar y quitar permisos  :\n<code>javier@javier-orta:~$ sudo chmod 777 primer_script</code></p>\n<p>Ahora verificamos los permisos :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ls -lr | grep primer_script\n-rwxrwxrwx  1 javier javier         30 feb 12 11:35 primer_script\njavier@javier-orta:~$ </code></pre>\n      </div>\n<p>Y cómo notamos tiene todos los permisos.</p>\n<p>procedemos a ejecutar el script, es de la siguiente manera:</p>\n<p><code># ./nombre_script</code></p>\n<p>Y ahora procedemos a ejecutar nuestro Script :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nhola mundo\njavier@javier-orta:~$ </code></pre>\n      </div>\n<p>Y cómo notamos imprime el hola mundo.</p>\n<h3>Recomendaciones de Scripting :</h3>\n<ul>\n<li>El código debe ser fácilmente legible, incluyendo espacios y sangrías que separen\nclaramente los bloques de código</li>\n<li>Deben añadirse comentarios claros sobre el funcionamiento general del programa\nprincipal y de las funciones, que contengan: autor, descripción, modo de uso del\nprograma, versión y fechas de modificaciones.</li>\n<li>Incluir comentarios para los bloques o mandatos importantes, que requieran cierta\naclaración.</li>\n<li>Agregar comentarios y ayudas sobre la ejecución del programa.</li>\n<li>Depurar el código para evitar errores, procesando correctamente los parámetros de\nejecución.</li>\n<li>No desarrollar un código excesivamente enrevesado, ni complicado de leer, aunque\nésto haga ahorrar líneas de programa.</li>\n<li>Utilizar funciones y las estructuras de programación más adecuadas para evitar repetir\ncódigo reiterativo.</li>\n<li>Los nombres de variables, funciones y programas deben ser descriptivos, pero sin\nconfundirse con otros de ellos, ni con los mandatos internos o externos; no deben ser\nni muy largos ni muy cortos.</li>\n<li>Todos los nombres de funciones y de programas suelen escribirse en letras\nminúsculas, mientras que las variables acostumbran a definirse en mayúsculas.</li>\n</ul>\n<h1>Redirecciones :</h1>\n<p>Las redirecciones representan las\nfunciones de entrada y salida de cada programa. Éstos son:</p>\n<ul>\n<li>Entrada estándar: procede del teclado; abre el fichero con descriptor 0 (stdin) para\nlectura.</li>\n<li>Salida estándar: se dirige a la pantalla; abre el fichero con descriptor 1 (stdout) para\nescritura.</li>\n<li>Salida de error: se dirige a la pantalla; abre el fichero con descriptor 2 (stderr) para\nescritura y control de mensajes de error.</li>\n</ul>\n<p>El proceso de redirección permite hacer una copia de uno de estos ficheros especiales hacia o\ndesde otro fichero normal.</p>\n<p>Ejemplo: stdout a un fichero</p>\n<p>Esto hará que la salida se escriba en un fichero.\n<code>ls -l > ls-l.txt</code>\n<br>\nEn este caso, se creará un fichero llamado ‘ls-l.txt’ que contendrá lo que ejecuta y muestra el comando.\nLo verificamos de la siguiente manera :\n<code>javier@javier-orta:~$ cat ls-l.txt</code></p>\n<p>Y mostramos lo que tiene el archivo.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ cat ls-l.txt \ntotal 5675796\ndrwxr-xr-x  3 root   root         4096 feb  1 10:29  \ndrwxrwxr-x  3 javier javier       4096 ene 30 09:52 Android\ndrwxr-xr-x  2 javier javier       4096 feb  6 18:08 cloudera-quickstart-vm-5.12.0-0-vmware\n-rw-rw-r--  1 javier javier 5811085017 dic 23 18:06 cloudera-quickstart-vm-5.12.0-0-vmware.zip\ndrwxr-xr-x  2 javier javier       4096 jul 19  2017 cloudera-quickstart-vm-5.12 (copia).0-0-vmware\ndrwxrwxr-x  8 javier javier       4096 ene 31 17:23 config hadoop cluster\n-rw-------  1 javier javier          0 feb  7 12:31 core\n-rw-r--r--  1 root   root          653 feb  1 10:33 derby.log\ndrwxr-xr-x  3 javier javier       4096 feb  9 17:29 Descargas\ndrwxr-xr-x  3 javier javier       4096 feb  9 17:28 Documentos\ndrwxr-xr-x  2 javier javier       4096 ene 29 16:53 Escritorio\n-rw-r--r--  1 javier javier       8980 ene 29 10:43 examples.desktop\ndrwxrwxrwx  3 javier javier       4096 feb  9 10:18 Git\n-rw-rw-r--  1 javier javier         24 ene 30 15:46 hola.scala\ndrwxrwxr-x  3 javier javier       4096 ene 30 11:43 IdeaProjects\ndrwxr-xr-x  2 javier javier       4096 feb  9 17:47 Imágenes\ndrwxrwxr-x  2 javier javier       4096 dic 16 09:28 ingestaHadoop\n-rw-rw-r--  1 javier javier        106 feb  1 10:50 iniciarHadoopCluster\n-rw-rw-r--  1 javier javier          0 feb 12 12:08 ls-l.txt\ndrwxr-xr-x  5 root   root         4096 feb  1 10:33 metastore_db\ndrwxr-xr-x  2 javier javier       4096 ene 29 10:59 Música\ndrwxr-xr-x  2 javier javier       4096 ene 29 10:59 Plantillas\n-rwxrwxrwx  1 root   root       794639 feb  1 12:11 postgresql-42.2.1.jar\n-rwxrwxrwx  1 javier javier         30 feb 12 11:35 primer_script\ndrwxr-xr-x  2 javier javier       4096 ene 29 10:59 Público\ndrwxrwxr-x 28 javier javier       4096 feb  6 09:58 Software\ndrwxr-xr-x  2 javier javier       4096 ene 29 10:59 Vídeos\ndrwxrwxr-x  4 javier javier       4096 ene 30 12:07 VirtualBox VMs\ndrwxrwxr-x  2 javier javier       4096 ene 29 15:44 vmware\ndrwxrwxr-x  3 javier javier       4096 ene 29 16:57 workspace-scala\n-rw-r--r--  1 root   root         6997 feb  1 10:33 zookeeper.out\njavier@javier-orta:~$ </code></pre>\n      </div>\n<h3>Tuberías o pipes :</h3>\n<p>Una tubería o pipe es una combinación de varios comandos que se ejecutan\nsimultáneamente, donde el resultado del primero se envía a la entrada del siguiente. Esta\ntarea se realiza por medio del carácter barra vertical | .</p>\n<p>Ejemplo :\nHacer un ls que pase por un grep (filtro)\n<code>javier@javier-orta:~$ ls | grep \".scala\"</code>\nLo que hace es que primero ejecuta el comando ls, y luego el resultado del ls lo pasa al grep, en el cual\nhacemos el filtro.</p>\n<p>Y el resultado es:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ls | grep \".scala\"\nhola.scala\nworkspace-scala\njavier@javier-orta:~$ </code></pre>\n      </div>\n<h3>Variables :</h3>\n<p>Se pueden usar variables como en cualquier otro lenguaje de programación. No existen tipos de datos. Una variable de bash puede contener un número, un caracter o una cadena de caracteres.</p>\n<p>No necesita declarar una variable. Se creará sólo con asignarle un valor a su referencia.</p>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash          \nCAD=\"¡Hola Mundo!\"\necho $CAD    </code></pre>\n      </div>\n<h4>Tipos de variables :</h4>\n<p>Las variables del intérprete BASH pueden considerarse desde los siguientes puntos de vista:</p>\n<ul>\n<li>Las variables locales son definidas por el usuario y se utilizan únicamente dentro de\nun bloque de código, de una función determinada o de un guión.</li>\n<li>Las variables de entorno son las que afectan al comportamiento del intérprete y al de\nla interfaz del usuario.</li>\n<li>Las variables especiales son aquellas que tienen una sintaxis especial y que hacen\nreferencia a valores internos del proceso. Los parámetros de posición pueden incluirse\nen esta categoría.</li>\n</ul>\n<h4>Variables locales :</h4>\n<p>Las variables locales son definidas para operar en un ámbito reducido de trabajo, ya sea en un\nprograma, en una función o en un bloque de código. Fuera de dicho ámbito de operación, la\nvariable no tiene un valor preciso.</p>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash          \nCAD=\"¡Hola Mundo!\"\necho $CAD </code></pre>\n      </div>\n<p>Cad es una variable local, ya que sólo se útiliza en ese bloque.</p>\n<h4>Variables de entorno :</h4>\n<p>Las Variables del entorno se establecen por el sistema y se pueden\nencontrar utilizando el comando env.\nLas variables de entorno contiene valores especiales.\nLas variables del entorno se definen en /etc/profile,\n/etc/profile.d/ y ~/.bash_profile.\nEstos ficheros son de inicialización y son leídos cuando\nse invoca la bash shell.</p>\n<p>Ejemplo imprimir una variable de entorno:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash          \necho $PATH\necho $JAVA_HOME</code></pre>\n      </div>\n<p>En este Ejemplo imprimimos la variable de entorno de JAVA_HOME y del PATH, y estas variables encuentran\nen bashrc , o en cualquier archivo ya mencionado :</p>\n<p>Para mostrar la variables pode realizar lo siguiente :\n<code>javier@javier-orta:~$ cat ~/.bashrc</code></p>\n<p>Y nos muestra algo parecido :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>JAVA_HOME=/home/javier/Software/jdk1.8.0_162\nPATH=$PATH:$HOME/bin:$JAVA_HOME/bin\nexport JAVA_HOME\nexport PATH\n\nSCALA_HOME=/home/javier/Software/scala-2.12.4\nPATH=$PATH:$SCALA_HOME/bin\nexport SCALA_HOME\nexport PATH\n\nGOROOT=/home/javier/Software/go\nPATH=$PATH:$GOROOT/bin\nexport GOROOT\nexport PATH\n\nexport SPARK_HOME=/home/javier/Software/spark\nexport PATH=$PATH:$SPARK_HOME/bin\n\nexport NEO4J_HOME=/home/javier/Software/neo4j-community-3.3.2\nexport PATH=$PATH:$NEO4J_HOME/bin</code></pre>\n      </div>\n<h4>Variables especiales :</h4>\n<p>Las variables especiales informan sobre el estado del proceso, son tratadas y modificadas\ndirectamente por el intérprete, por lo tanto, son de sólo lectura. La siguiente tabla muestra estas variables.</p>\n<p><img src=\"https://image.ibb.co/ea6FD7/variables.png\" alt=\"Variables especiales \"></p>\n<h3>Condicionales (if) :</h3>\n<p>La sintaxis básica de un condicional es la siguiente:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>if [[ CONDICIÓN 1 ]];\n\tthen\n\t  COMANDO 1 si se cumple la condición 1\n\telif [[ CONDICIÓN 2 ]];\n\tthen\n\t  COMANDO 2 si se cumple la condición 2\n\telse\n\t  COMANDO 3 si no se cumple la condición 2\n\tfi</code></pre>\n      </div>\n<p>Al comparar números podemos realizar las siguientes operaciones:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>operador\tsignificado\n-lt\t\t\tmenor que (<)\n-gt\t\t\tmayor que (>)\n-le\t\t\tmenor o igual que (<=)\n-ge\t\t\tmayor o igual que (>=)\n-eq\t\t\tigual (==)\n-ne\t\t\tno igual (!=)</code></pre>\n      </div>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nnum1=1  # la variable toma el primer valor que le pasamos al script\nnum2=2  # la variable toma el segundo valor que le pasamos al script\nif [[ $num1 -gt $num2 ]];\nthen\n  echo $num1 es mayor que $num2\nelse\n  echo $num2 es mayor que $num1\nfi</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \n2 es mayor que 1\njavier@javier-orta:~$ </code></pre>\n      </div>\n<p>A la hora de comparar cadenas de texto:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>operador\tsignificado\n=\t\t\tigual, las dos cadenas de texto son exactamente idénticas\n!=\t\t\tno igual, las cadenas de texto no son exactamente idénticas\n<\t\t\tes menor que (en orden alfabético ASCII)\n>\t\t\tes mayor que (en orden alfabético ASCII)\n-n\t\t\tla cadena no está vacía\n-z\t\t\tla cadena está vacía</code></pre>\n      </div>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nstring1='reo'\nstring2='teo'\nif [[ $string1 > $string2 ]];\nthen\n  echo True\nelse\n  echo False\nfi</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nFalse\njavier@javier-orta:~$</code></pre>\n      </div>\n<p>Condicionales con archivos :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>operador\tDevuelve true si\n-e name\t\tname existe\n-f name\t\tname es un archivo normal (no es un directorio)\n-s name\t\tname NO tiene tamaño cero\n-d name\t\tname es un directorio\n-r name\t\tname tiene permiso de lectura para el user que corre el script\n-w name\t\tname tiene permiso de escritura para el user que corre el script\n-x name\t\tname tiene permiso de ejecución para el user que corre el script</code></pre>\n      </div>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nFILE=$@\nif [ -f $FILE ]; then\necho el fichero $FILE existe\nelse\necho fichero no encontrado\nfi</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script Android/\nfichero no encontrado\njavier@javier-orta:~$ </code></pre>\n      </div>\n<p>Operadores Arítmeticos :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>+ \t\tsuma\n- \t\tresta\n* \t\tmultiplicación\n/ \t\tdivisión\n** \t\texponenciación\n% \t\tmódulo</code></pre>\n      </div>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nvar1=12\nvar2=3\necho \"suma :\" $((var1+var2))\necho \"resta :\" $((var1-var2))\necho \"potencia : \" $((var1**var2))\necho \"multiplicacion : \" $((var1*var2))  </code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nsuma : 15\nresta : 9\npotencia : 1728\nmultiplicacion : 36\njavier@javier-orta:~$ </code></pre>\n      </div>\n<h3>Los bucles for, while y until :</h3>\n<p>El bucle for es distinto a los de otros lenguajes de programacion. Básicamente, le permite iterar sobre una serie de\n‘palabras’ contenidas dentro de una cadena.</p>\n<p>El bucle while ejecuta un trozo de codigo si la expresión de control es verdadera, y sólo se para cuando es falsa (o se\nencuentra una interrupcion explícita dentro del codigo en ejecución). </p>\n<p>El bucle until es casi identico al bucle loop, excepto en que el código se ejecuta mientras la expresión de control se\nevalue como falsa.\t</p>\n<p>Ejemplo for :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nfor i in $( ls ); do\necho item: $i\ndone</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script Android/\nitem: Android\nitem: cloudera-quickstart-vm-5.12.0-0-vmware\nitem: cloudera-quickstart-vm-5.12.0-0-vmware.zip\nitem: cloudera-quickstart-vm-5.12\nitem: (copia).0-0-vmware\nitem: config\nitem: hadoop\nitem: cluster\nitem: core\nitem: derby.log\nitem: Descargas\nitem: Documentos\nitem: Escritorio\nitem: examples.desktop\nitem: Git\nitem: hola.scala\nitem: IdeaProjects\nitem: Imágenes\nitem: ingestaHadoop\nitem: iniciarHadoopCluster\nitem: ls-l.txt\nitem: metastore_db\nitem: Música\nitem: Plantillas\nitem: postgresql-42.2.1.jar</code></pre>\n      </div>\n<p>Ejemplo while:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nCONTADOR=0\nwhile [ $CONTADOR -lt 10 ]; do\necho El contador es $CONTADOR\nlet CONTADOR=CONTADOR+1\ndone</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nEl contador es 0\nEl contador es 1\nEl contador es 2\nEl contador es 3\nEl contador es 4\nEl contador es 5\nEl contador es 6\nEl contador es 7\nEl contador es 8\nEl contador es 9</code></pre>\n      </div>\n<p>Ejemplo until :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\nCONTADOR=20\nuntil [ $CONTADOR -lt 10 ]; do\necho CONTADOR $CONTADOR\nlet CONTADOR-=1\ndone</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nCONTADOR 20\nCONTADOR 19\nCONTADOR 18\nCONTADOR 17\nCONTADOR 16\nCONTADOR 15\nCONTADOR 14\nCONTADOR 13\nCONTADOR 12\nCONTADOR 11\nCONTADOR 10</code></pre>\n      </div>\n<h3>Funciones :</h3>\n<p>Utilizar funciones se utilizan para agrupar trozos de código de una manera\nmas lógica o estructurada.\nDeclarar una funcion sólo se escribe : function mi_func { mi codigo  }.\nLlamar a la funcion  sólo hay que escribir su nombre.</p>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\n\nfunction hola {\necho Hola!\n}\n\nhola</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nHola!\njavier@javier-orta:~$</code></pre>\n      </div>\n<h3>Manipulación de cadenas de texto :</h3>\n<p>Extraer subcadena\nMediante ${cadena:posicion:longitud} podemos extraer una subcadena de otra cadena. </p>\n<p>Ejemplo :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>#!/bin/bash\n#Por ejemplo en la cadena string=abcABC123ABCabc:\nstring=abcABC123ABCabc\necho ${string:0} # : abcABC123ABCabc\necho ${string:0:1} # : a (primer caracter)\necho ${string:7} #: 23ABCabc\necho ${string:7:3} # : 23A (3 caracteres desde posición 7)\necho ${string:7:-3} # : 23ABCabc (desde posición 7 hasta el final)\necho ${string: -4} #: Cabc (atención al espacio antes del menos)\necho ${string: -4:2} # : Ca (atención al espacio antes del menos)</code></pre>\n      </div>\n<p>Ejecución :</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-none\"><code>javier@javier-orta:~$ ./primer_script \nabcABC123ABCabc\na\n23ABCabc\n23A\n23ABC\nCabc\nCa</code></pre>\n      </div>\n<h4>Para más información:</h4>\n<!-- Please add any articles you think might be helpful to read before writing the article -->\n<ul>\n<li>\n<p>Programación Avanzada en Shell:   <a href='http://www.informatica.us.es/~ramon/articulos/Programacion-BASH.pdf' target='_blank' rel='nofollow'>http://www.informatica.us.es/~ramon/articulos/Programacion-BASH.pdf</a></p>\n</li>\n<li>\n<p>El She Bash :\n<a href='https://ubuntulife.files.wordpress.com/2009/02/bash.pdf' target='_blank' rel='nofollow'>https://ubuntulife.files.wordpress.com/2009/02/bash.pdf</a> </p>\n</li>\n</ul>\n<ul>\n<li>\n<p>Programacion en BASH :\n<a href='http://es.tldp.org/COMO-INSFLUG/es/pdf/Bash-Prog-Intro-COMO.pdf' target='_blank' rel='nofollow'>http://es.tldp.org/COMO-INSFLUG/es/pdf/Bash-Prog-Intro-COMO.pdf</a> </p>\n</li>\n<li>\n<p>Programacion Shell :\n<a href='https://www.freeshell.de/~rasoda/programacion/guia-shell.pdf' target='_blank' rel='nofollow'>https://www.freeshell.de/~rasoda/programacion/guia-shell.pdf</a> </p>\n</li>\n</ul>\n<ul>\n<li>\n<p>Scripts de bash :\n<a href='https://bioinf.comav.upv.es/courses/unix/scripts_bash.html#manipulacin-de-cadenas-de-texto' target='_blank' rel='nofollow'>https://bioinf.comav.upv.es/courses/unix/scripts_bash.html#manipulacin-de-cadenas-de-texto</a> </p>\n</li>\n<li>\n<p>Expresiones Regulares :\n<a href='http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm' target='_blank' rel='nofollow'>http://tldp.org/LDP/GNU-Linux-Tools-Summary/html/x11655.htm</a> </p>\n</li>\n</ul>",
            "fields": {
                "slug": "/arquitectura-sistemas-operativos-linux/28-programacion-bash/"
            },
            "frontmatter": {
                "title": "28. Programación Bash"
            }
        }
    },
    "pathContext": {
        "slug": "/arquitectura-sistemas-operativos-linux/28-programacion-bash/"
    }
}